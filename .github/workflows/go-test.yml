name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/**'
      - '.golangci.yml'
  pull_request:
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/**'
      - '.golangci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('.golangci.yml') }}

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.8

      - name: Verify go mod tidy
        run: make mod-check

      - name: Check formatting
        run: |
          make fmt
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code is not formatted. Please run 'make fmt'"
            git diff
            exit 1
          fi

      - name: Build before linting
        run: go build -v ./...

      - name: Run linter
        run: make lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Run unit tests with coverage
        run: make unit-cover

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: unit-tests-coverage
          fail_ci_if_error: false

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Build application
        run: make build

      - name: Test Docker build
        run: |
          docker build -t mcp-lnc-server-test .
          docker run --rm mcp-lnc-server-test --version

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Install gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner
        run: gosec -no-fail -fmt sarif -out gosec.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
